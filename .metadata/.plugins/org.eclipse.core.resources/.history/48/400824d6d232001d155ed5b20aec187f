/*
 * Copyright (c) 2015-2020, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.c ========
 */
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <stdio.h>

/* Driver Header files */
#include <ti/drivers/GPIO.h>
#include <ti/drivers/UART.h>

/* Driver configuration */
#include "ti_drivers_config.h"

void addInput(UART_Handle, char c);
void append(char* s, char c);
void backspace(UART_Handle handle, char* s);
void check_command(UART_Handle handle, char* s);
void printAbout(UART_Handle handle);
void printHelp(UART_Handle handle);
void printString(UART_Handle handle, char* s);
void setParams(UART_Params *param);



/*
 *  ======== mainThread ========
 */
void *mainThread(void *arg0)
{
    char        input;
    char        command[128];
    const char  echoPrompt[] = "Echoing characters:\r\n";
//    char  helpPrompt[128] = "\n\rThis is a sample help prompt\r\n";
    UART_Handle uart;
    UART_Params uartParams;

//    UART_handle *u = &uart;
    UART_Params *p = &uartParams;

    /* Call driver init functions */
    GPIO_init();
    UART_init();

    /* Configure the LED pin */
    GPIO_setConfig(CONFIG_GPIO_LED_0, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW);

    /* Turn on user LED */
    GPIO_write(CONFIG_GPIO_LED_0, CONFIG_GPIO_LED_ON);

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    setParams(p);

    uart = UART_open(CONFIG_UART_0, &uartParams);

    if (uart == NULL) {
        /* UART_open() failed */
        while (1);
    }

    UART_write(uart, echoPrompt, sizeof(echoPrompt));

    /* Loop forever echoing */
    while (1) {


        if (strlen(command) < 128) {

            UART_read(uart, &input, 1);
            UART_write(uart, &input, 1);

            if (input == '\r') {

                check_command(uart, command);
                memset(&command[0], 0, sizeof(command));

            } else if (input == '\b' || input == 0x7F) {

                int len = strlen(command);
                command[len-1] = 0;

            } else {

                append(command, input);

            }

        } else {

            command[0] = 0;
            strcpy(command, "\r\nExceeded command limit!\r\n");
            UART_write(uart, command, sizeof(command));
            memset(&command[0], 0, sizeof(command));

        }

    }
}

void setParams(UART_Params *param) {
    param->writeDataMode = UART_DATA_BINARY;
    param->readDataMode = UART_DATA_BINARY;
    param->readReturnMode = UART_RETURN_FULL;
    param->baudRate = 115200;
}

void addInput(UART_Handle uart, char input) {
    char msg[128] = "";

    if (input == '\r') {

        check_command(uart, msg);
        memset(&msg[0], 0, sizeof(0));

    } else if (input == '\b' || input == 0x7F) {

        int len = strlen(msg);
        msg[len - 1] = 0;

    } else if (strlen(msg) > 128) {

        msg[0] = 0;
        strcpy(msg, "\r\nExceeded command limit!\r\n");
        UART_write(uart, msg, sizeof(msg));
        memset(&msg[0], 0, sizeof(msg));

    } else {

        append(msg, input);

    }
}

void append(char* s, char c) {
    int len = strlen(s);
    s[len] = c;
    s[len + 1] = '\0';
}

void backspace(UART_Handle handle, char* s) {
    int len = strlen(s);

//    s[len] = 0;
//    s[len]

}

void check_command(UART_Handle handle, char* s) {

    char buffer[128];
    memset(&buffer[0], 0, sizeof(0));

    if (!strcmp(s, "-about")) {
        printAbout(handle);
    } else if (!strcmp(s, "-help")){
        printHelp(handle);
    } else if (strstr(s, "-print")) {
        printString(handle, s);
    }

}

void printAbout(UART_Handle handle) {
    char msg[128];
    memset(&msg[0], 0, sizeof(msg));

    short version = 0;
    short build = 1;

    sprintf(msg, "\n\n\rAdrian Garcia %d.%d  %s %s\n\n\r", version, build, __TIME__, __DATE__);
    UART_write(handle, msg, sizeof(msg));
}

void printHelp(UART_Handle handle) {
    char msg[128];
    memset(&msg[0], 0, sizeof(msg));

    strcpy(msg, "\n\n\r-help               -help lists available commands");
    UART_write(handle, msg, sizeof(msg));
    strcpy(msg, "\r\n-about              -about provides info on changes made\n\n\r");
    UART_write(handle, msg, sizeof(msg));
//    strcpy(msg, "\r\n");
//    UART_write(handle, msg, sizeof(msg));
}

void printString(UART_Handle handle, char* s) {

    char *c = 0;

    if (s == NULL) {
//        return NULL;
        ;
    }

    c = strchr(s, ' ');
    if (!c) {
//        return NULL;
        ;
    }
    while (*c == ' ') {
        c++;
    }
    if (!*c) {
//        return NULL;
        ;
    }

//    return c;
    UART_write(handle, c, sizeof(c));

}
